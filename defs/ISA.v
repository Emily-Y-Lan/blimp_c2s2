//========================================================================
// ISA.v
//========================================================================
// Common definitions to use to describe the ISA

`ifndef DEFS_ISA_V
`define DEFS_ISA_V

package ISA;

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // Instructions
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // Definitions of the instructions that Blimp supports

  `define RVI_INST_ADD   32'b0000000_?????_?????_000_?????_0110011
  `define RVI_INST_MUL   32'b0000001_?????_?????_000_?????_0110011
  `define RVI_INST_ADDI  32'b???????_?????_?????_000_?????_0010011
  `define RVI_INST_LW    32'b???????_?????_?????_010_?????_0000011
  `define RVI_INST_SW    32'b???????_?????_?????_010_?????_0100011
  `define RVI_INST_JAL   32'b???????_?????_?????_???_?????_1101111
  `define RVI_INST_JALR  32'b???????_?????_?????_000_?????_1100111
  `define RVI_INST_BEQ   32'b???????_?????_?????_000_?????_1100011

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // Opcodes
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // A linearization of opcodes to indicate a specific instruction type

  typedef enum logic [2:0] {
    OP_ADD,
    OP_MUL,
    OP_ADDI,
    OP_LW,
    OP_SW,
    OP_JAL,
    OP_JALR,
    OP_BEQ
  } rv_op;

endpackage

`endif  // DEFS_ISA_V
