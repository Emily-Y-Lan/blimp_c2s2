#!/usr/bin/env python3
# ========================================================================
# spi-flash.py
# ========================================================================
# A CLI utility for using Adafruit's FT232H to flash a program over SPI
#
#  - https://www.adafruit.com/product/2264
#
# `MAP_FILE` is an address mapping file, as generated by rvelfdump. We
# only currently support 32b words.
#
# Pin Mapping:
#  - D0: SCLK
#  - D1: MOSI
#  - D2: MISO
#  - D3: CS
#
# Make sure the `I2C MODE` switch is `Off`

import argparse
import os
import re

from pyftdi.spi import SpiController

# ------------------------------------------------------------------------
# Argument Parsing
# ------------------------------------------------------------------------

parser = argparse.ArgumentParser(
    description="A CLI utility for using Adafruit's FT232H to flash a "
    "program over SPI"
)

parser.add_argument(
    "map_file", metavar="MAP_FILE", help="The address mapping file to flash"
)
parser.add_argument(
    "-e",
    "--endian",
    choices=["big", "little"],
    help="Order to send bytes (big = MSB first)",
    default="big",
)
parser.add_argument("-f", "--freq", type=int, help="SPI frequency", default=1e6)
parser.add_argument(
    "-m", "--mode", choices=[0, 1, 2, 3], help="SPI mode", default=0
)
parser.add_argument(
    "-q", "--quiet", action="store_true", help="Suppress output"
)

args = parser.parse_args()

# ------------------------------------------------------------------------
# Helper Functions
# ------------------------------------------------------------------------

BLUE = "\033[1;34m"
RESET = "\033[0m"


def info(msg: str, end: str = "\n") -> None:
    """Print an informational message."""
    if not args.quiet:
        print(f"{BLUE}[INFO]{RESET} {msg}", end=end)


def byte_str(B):
    """Return the given bytes as a human friendly KB, MB, GB, or TB string.

    Source: https://stackoverflow.com/a/31631711
    """
    B = float(B)
    KB = float(1024)
    MB = float(KB**2)  # 1,048,576
    GB = float(KB**3)  # 1,073,741,824
    TB = float(KB**4)  # 1,099,511,627,776

    if B < KB:
        return "{0:.0f} B".format(B)
    elif KB <= B < MB:
        return "{0:.2f} KB".format(B / KB)
    elif MB <= B < GB:
        return "{0:.2f} MB".format(B / MB)
    elif GB <= B < TB:
        return "{0:.2f} GB".format(B / GB)
    elif TB <= B:
        return "{0:.2f} TB".format(B / TB)


# ------------------------------------------------------------------------
# Load the input file
# ------------------------------------------------------------------------

input_path = args.map_file
if not os.path.exists(input_path):
    raise ValueError(f"The file '{input_path}' does not exist")
if not os.path.isfile(input_path):
    raise ValueError(f"The path '{input_path}' exists, but isn't a file")
info(f"Found map file: {input_path}")

data_mapping = []
map_regex = re.compile(
    r"(?:0[xX])?([0-9a-fA-F]{8}): (?:0[xX])?([0-9a-fA-F]{8})"
)


class ParseError(Exception):
    """An exception from incorrect data formatting"""

    def __init__(self, message, file, line):
        self.message = (
            f"Couldn't extract data from line '{message}' ({file}:{line})\n"
        )
        self.message += "Make sure it is of the format 'deadbeef: cafecafe'"
        super().__init__(self.message)


with open(input_path, "r") as file:
    for line_num, line in enumerate(file, start=1):
        if mapping := line.strip():
            if match := map_regex.match(mapping):
                addr = int(match.group(1), 16)
                data = int(match.group(2), 16)
                data_mapping.append((addr, data))
            else:
                raise ParseError(mapping, input_path, line_num)


info(f"Parsed file (found {byte_str(4 * len(data_mapping))})")

# ------------------------------------------------------------------------
# Flash over SPI
# ------------------------------------------------------------------------
# Reference: https://forums.adafruit.com/viewtopic.php?t=211165

spi = SpiController()
spi.configure("ftdi://ftdi:232h/1")
controller = spi.get_port(cs=0, freq=args.freq, mode=args.mode)
info("Connected to SPI Controller")

num_entries = len(data_mapping)
for idx, (addr, data) in enumerate(data_mapping):
    addr_bytes = addr.to_bytes(4, byteorder=args.endian)
    controller.write(addr_bytes)
    data_bytes = data.to_bytes(4, byteorder=args.endian)
    controller.write(data_bytes)
    completion = 100 * (idx + 1) / num_entries
    info(
        "Sending data... ({0:.2f}%)".format(completion),
        end="\r" if idx < (num_entries - 1) else "\n",
    )
info("Program flashed")
